trigger:
  branches:
    include:
      - main
      - release

variables:
  - group: databricks-deployment-vg

stages:
  # Run BundleCI stage upon making a PR against the main branch
  - stage: BundleCI
    displayName: "Bundle validation"
    # Trigger BundleCI stage on PR against the default branch, and not on pushes to other branches
    condition: |
      and(
        not(eq(variables['Build.Reason'], 'IndividualCI')),
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')
      )

    jobs:
      - job: StagingBundleCI
        displayName: "Staging bundle validation"

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - script: env | sort
            displayName: "Environment / Context"

          - checkout: self
            displayName: "Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)"
            persistCredentials: true
            clean: true

          # Install Databricks CLI
          - script: |
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
            displayName: "Install Databricks CLI"

          # Validate bundle to be deployed to the staging workspace
          - script: |
              databricks bundle validate -t uat
            displayName: "Validate bundle for uat"
            env:
              ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
              ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
              ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)

      - job: prodBundleCI
        displayName: "Prod bundle validation"
        dependsOn: [] # Removes the implicit dependency on previous job and force prodBundleCI job to run in parallel

        steps:
          - script: env | sort
            displayName: "Environment / Context"

          - checkout: self
            displayName: "Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)"
            persistCredentials: true
            clean: true

          # Install Databricks CLI
          - script: |
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
            displayName: "Install Databricks CLI"

          # Validate bundle to be deployed to the prod workspace
          - script: |
              databricks bundle validate -t prod
            displayName: "Validate bundle for prod"
            env:
              ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
              ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
              ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)

  # Run StagingBundleCD stage after successfully merging into the main branch
  - stage: StagingBundleCD
    displayName: "Staging bundle deployment"
    # Trigger deployment of bundle assets when PRs are merged into the main branch
    condition: |
      and(
        eq(variables['Build.SourceBranch'], 'refs/heads/main'),
        not(eq(variables['Build.Reason'], 'PullRequest'))
      )

    jobs:
      - job: StagingBundleCD
        displayName: "Bundle Deployment Staging"

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - script: env | sort
            displayName: "Environment / Context"

          - checkout: self
            displayName: "Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)"
            persistCredentials: true
            clean: true

            # Install Databricks CLI
          - script: |
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
            displayName: "Install Databricks CLI"

          # Validate bundle to be deployed to the Staging workspace
          - script: |
              databricks bundle validate -t uat
            displayName: "Validate bundle for uat"
            env:
              ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
              ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
              ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)

          # Deploy bundle to Staging workspace
          - script: |
              databricks bundle deploy -t uat
            displayName: "Deploy bundle to uat"
            env:
              ARM_TENANT_ID: $(STAGING_AZURE_SP_TENANT_ID)
              ARM_CLIENT_ID: $(STAGING_AZURE_SP_APPLICATION_ID)
              ARM_CLIENT_SECRET: $(STAGING_AZURE_SP_CLIENT_SECRET)

  # Run prod bundle CD stage after successfully merging into the release branch
  - stage: prodBundleCD
    displayName: "Prod bundle deployment"
    # Trigger deployment of Bundle assets when PRs are merged into the release branch
    condition: |
      and(
        eq(variables['Build.SourceBranch'], 'refs/heads/release'),
        not(eq(variables['Build.Reason'], 'PullRequest'))
      )

    jobs:
      - job: prodBundleCD
        displayName: "Bundle deployment prod"

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - script: env | sort
            displayName: "Environment / Context"

          - checkout: self
            displayName: "Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)"
            persistCredentials: true
            clean: true

            # Install Databricks CLI
          - script: |
              curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
            displayName: "Install Databricks CLI"

          # Validate bundle to be deployed to the prod workspace
          - script: |
              databricks bundle validate -t prod
            displayName: "Validate bundle for prod"
            env:
              ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
              ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
              ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)

          # Deploy bundle to prod workspace
          - script: |
              databricks bundle deploy -t prod
            displayName: "Deploy bundle to prod"
            env:
              ARM_TENANT_ID: $(PROD_AZURE_SP_TENANT_ID)
              ARM_CLIENT_ID: $(PROD_AZURE_SP_APPLICATION_ID)
              ARM_CLIENT_SECRET: $(PROD_AZURE_SP_CLIENT_SECRET)
